@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject MemContainer mem
@inject NavigationManager nav

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">WebUI</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    // When starting
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            // Try to read local data
            mem.UserInfo = await localStorage.GetItemAsync<Juoksulaskuri.Core.Models.UserInfo>("Userdata");
            mem.SetRaces(await localStorage.GetItemAsync<List<Juoksulaskuri.Core.Models.RaceResult>>("Races"));

            if(string.IsNullOrEmpty(mem.UserInfo.Name))
                nav.NavigateTo("/personal");
        }
        catch(Exception)
        {

        }
        finally
        {
            // Finally update all controls            
            mem.Update();            
        }
    }

    // Update event
    protected override void OnInitialized()
    {
        mem.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        mem.OnChange -= StateHasChanged;
    }
}