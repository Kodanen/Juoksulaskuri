@page "/racepredictions"

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject MemContainer mem
@inject NavigationManager nav

@using Juoksulaskuri.Core.Models;

<PageTitle>Kisaennusteet</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Kisaennusteet</MudText>

<MudTable Items="@predictions" Hover="false" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Matka [m]</MudTh>
        <MudTh>Aika</MudTh>
        <MudTh>Nopeus [km/h]</MudTh>
        <MudTh>Tahti</MudTh>
        <MudTh>% VO2max</MudTh>
        <MudTh>Energia</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Matka">@context.Distance</MudTd>
        <MudTd DataLabel="Aika">@context.Duration</MudTd>
        <MudTd DataLabel="Nopeus">@context.SpeedKMH.ToString("F1")</MudTd>
        <MudTd DataLabel="Tahti">@context.Pace</MudTd>
        <MudTd DataLabel="VO2max%">@context.PercentMax.ToString("F1")</MudTd>
        <MudTd DataLabel="Energia">@context.Energy</MudTd>
    </RowTemplate>
</MudTable>



    @code {
    List<RacePrediction> predictions = new List<RacePrediction>();

    // On Load
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Check that we have data
        if (mem.UserInfo.IsValid() && mem.IsValidRace())
        {
            predictions.Clear();

            // Choose race which is used to calculate predictions
            var race = mem.Races.First();

            foreach(var dist in Juoksulaskuri.Core.Helpers.PredictionDistances())
            {
                RacePrediction p = Juoksulaskuri.Core.Helpers.CalculateRacePrediction(mem.UserInfo, race, dist);
                predictions.Add(p);
            }
        }
    }
}
